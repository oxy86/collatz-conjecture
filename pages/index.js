import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css'

import {
  SimpleLineChart
} from 'components';



export default function Home() {

  const [startValue, setStartValue] = useState(1);

  const [startValueMultiple, setStartValueMultiple] = useState(1);

  const [series, setSeries] = useState([]);
  const [logSeries, setLogSeries] = useState([]);


  // On load, compute the trivial series (x=1)
  useEffect(() => {
    computeSeries(1);
  }, [1]); // Only run the effect once


  /**
   * Handles changing the first input box
   * @param {*} e 
   * @returns null
   */
  const handleInputChange = (e) => {
    const seedNum = parseFloat(e.target.value);
    if (seedNum == 0) {
      return;
    }
    setStartValue(seedNum);
    computeSeries(seedNum);
  }

  /**
   * Computes the series/sequence of hailstone numbers, starting with seedNum
   * @param {*} seedNum 
   * @returns 
   */
  const computeSeries = (seedNum) => {
    var nextNum = seedNum;
    var minNumber = 1;
    var maxSteps = 1000;
    const mySeries = [
      {
        x: 0,
        y: seedNum,
        ct: 1
      },
    ];
    const myLogSeries = [
      {
        x: 0,
        logy: Math.log10(seedNum),
        ct: 1
      },
    ];

    var i = 0;

    // Handle trivial cases
    if (seedNum == 1 || seedNum == 2) {
      minNumber = 0;
      maxSteps = 10;
    }

    // Loop
    while (nextNum > minNumber && i < maxSteps) {

      i = i + 1;

      // Compute the next number
      nextNum = computeNext(i, nextNum);

      // Update the sequence in memory
      mySeries.push(
        {
          x: i,
          y: nextNum,
          ct: 1
        }
      );

      myLogSeries.push(
        {
          x: i,
          logy: Math.log(nextNum),
          ct: 1
        }
      );

    }

    // Update the series in state
    setSeries(mySeries);
    setLogSeries(myLogSeries);

  }


  /**
   * Computes the next number (hailstone) in the sequence
   * @param {*} i 
   * @param {*} x_i 
   * @returns 
   */
  const computeNext = (i, x_i) => {

    if (x_i % 2 == 0) {
      // console.log("i:", i, "x=", x_i, " is even");
      return x_i / 2;
    }
    else {
      // console.log("i:", i, "x=", x_i, " is odd");
      return 3 * x_i + 1;
    }
  }



  /**
   * Handles changing the second input box
   * @param {*} e 
   * @returns null
   */
   const handleInputChangeMultiple = (e) => {
    const seedNum = parseFloat(e.target.value);
    if (seedNum == 0) {
      return;
    }
    setStartValueMultiple(seedNum);
    computeSeriesMultiple(seedNum);
  }



  /**
   * Computes multiple sequences up to seedNum
   * @param {*} seedNum 
   * @returns 
   */
   const computeSeriesMultiple= (seedNum) => {
    var nextNum = seedNum;
    var minNumber = 1;
    var maxSteps = 1000;
    const mySeries = [
      {
        x: 0,
        y: seedNum,
        ct: 1
      },
    ];
    const myLogSeries = [
      {
        x: 0,
        logy: Math.log10(seedNum),
        ct: 1
      },
    ];

    var i = 0;

    // Handle trivial cases
    if (seedNum == 1 || seedNum == 2) {
      minNumber = 0;
      maxSteps = 10;
    }

    // Loop
    while (nextNum > minNumber && i < maxSteps) {

      i = i + 1;

      // Compute the next number
      nextNum = computeNext(i, nextNum);

      // Update the sequence in memory
      mySeries.push(
        {
          x: i,
          y: nextNum,
          ct: 1
        }
      );

      myLogSeries.push(
        {
          x: i,
          logy: Math.log(nextNum),
          ct: 1
        }
      );

    }

    // Update the series in state
    setSeries(mySeries);
    setLogSeries(myLogSeries);

  }


  return (
    <div className="pt-8">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-max flex w-full flex-col items-center justify-start px-4 pb-8 text-center">
        <div className="">
          <h1 className="text-6xl font-bold">
            Collatz Conjecture
          </h1>
          <p className="mt-3 text-2l">
            Also known as the <code>Ulam Conjecture</code>, <code>Kakutani Problem</code>, <code>Syracuse Problem</code> or simply <code className='rounded-md bg-gray-100 p-1 mx-1 font-mono'>3x+1</code>
          </p>
        </div>

        <div className="my-5 flex justify-center items-center">
          <p className="text-xl pr-4">
            Pick a positive number <code>x</code>:
          </p>
          <input
            min={1}
            autoFocus
            type="number"
            placeholder="1"
            step="1"
            className="rounded text-pink-500 pr-4"
            value={startValue}
            onChange={(e) => handleInputChange(e)}
          />
          {/* <input type="checkbox" class="rounded text-pink-500" /> */}
        </div>

        <div className='w-full flex flex-row flex-wrap justify-center items-center md:overflow-x-auto overflow-x-scroll'>

          <div className='flex-initial flex-col justify-center items-center'>
          <p>
              The x sequence
            </p>
            <SimpleLineChart
              className="chart-wrapper"
              data={series}
              dataKeyX="x"
              dataKeyY="y"
            />
          </div>
          <div className='flex-initial flex-col justify-center items-center'>
            <p>
              The log(x) sequence
            </p>
            <SimpleLineChart
              className="chart-wrapper"
              data={logSeries}
              dataKeyX="x"
              dataKeyY="logy"
            />
          </div>
        </div>
        <div className="mt-6 flex max-w-4xl flex-wrap items-center justify-around sm:w-full">
          <a
            href="#"
            className="mt-6 w-96 rounded-xl border p-6 text-left hover:text-blue-600 focus:text-blue-600"
          >
            <h3 className="text-2xl font-bold">The rules &rarr;</h3>
            <p className="mt-4 text-xl">
              Take any positive integer number.
              If the number is odd, multiply it by <code>3</code> and add <code>1</code>.
              If the number is even, divide by <code>2</code>.
              Repeat with every new number to get a sequence of numbers.
            </p>
          </a>

          <a
            href="#"
            className="mt-6 w-96 rounded-xl border p-6 text-left hover:text-blue-600 focus:text-blue-600"
          >
            <h3 className="text-2xl font-bold">The conjecture &rarr;</h3>
            <p className="mt-4 text-xl">
              EVERY positive integer, if you apply these rules, will end up in a 4 &rarr;  2 &rarr; 1 loop.
              This is commonly called the <code>Collatz Conjecture</code> after German mathematician Luther Collatz.
            </p>
          </a>
        </div>

        <div className='mt-10 flex flex-col hidden'>
          <span className='font-bold underline'>Test multiple sequences</span>
          <span className=''>Select any number to compute and graph all sequences that start with every number up to the selected number</span>

          <div className="my-5 flex justify-center items-center">
          <p className="text-xl pr-4">
            Pick a number <code>X</code>:
          </p>
          <input
            min={1}
            type="number"
            placeholder="2"
            step="1"
            className="rounded text-pink-500 pr-4"
            value={startValueMultiple}
            onChange={(e) => handleInputChangeMultiple(e)}
          />
          {/* <input type="checkbox" class="rounded text-pink-500" /> */}
        </div>


        </div>

      </main>

      <footer className="min-h-[200px] flex w-full items-start justify-center p-5 border-t">
        <a
          className="flex items-center justify-center gap-2 px-2" 
          href="https://www.webzein.gr?utm_source=code&utm_medium=default&utm_campaign=collatz-conjecture"
          target="_blank"
          rel="noopener noreferrer"
        >
          Created with ❤️  by{' '}
          <Image src="/webzein.svg" alt="Webzein Logo" width={16} height={20} />
        </a>
        - 
        <a
          className="flex items-center justify-center gap-2 px-2"
          href="https://github.com/oxy86/collatz-conjecture"
          target="_blank"
          rel="noopener noreferrer"
        >
          Fork me at 
          <svg height="16" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" className="octicon octicon-mark-github v-align-middle">
            <path fillRule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>
        </svg>
        </a>
      </footer>
    </div>
  )
}
